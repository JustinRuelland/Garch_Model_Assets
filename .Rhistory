sep=",", head=T, row.names=1)
``{}
SAheartData=SAheart %>% (select(-famist,-chd))
SAheartData=SAheart %>% (select(-famhist,-chd))
View(SAheart)
SAheart=read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/SAheart.data",
sep=",", head=T, row.names=1)
SAheartData=SAheart %>% (select(-famhist,-chd))
SAheartData=SAheart %>% select(-famhist,-chd)
moyenne=mean(SAheartData$sbp)
moyenne=mean(SAheartData$sbp)
moyennebis=mean(SAheartData[,1])
moyenne=mean(SAheartData$sbp)
moyennebis=mean(SAheartData[,2])
M = matrix(1,nrow=n, ncol=p)
SAheartData=SAheart %>% select(-famhist,-chd)
n=row(SAheart)
p=ncol(SAheart)
M = matrix(1,nrow=n, ncol=p)
M = matrix(1,nrow=n, ncol=p)
moyennes=colmeans(SAheartData)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X= SAheartData - moyennes
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X= SAheartData - moyennes
colMeans(X)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X= SAheartData - moyennes
print(colMeans(X))
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData
print(colMeans(X))
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData
print(colMeans(X))
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sweeo(M,MARGIN=2,STATS=ecarttype,FUN=(*))
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sweep(M,MARGIN=2,STATS=ecarttype,FUN=(*))
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
Y=X/ecarttype
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
Y=X/ecarttype
apply(Y,MARGIN=2,FUN=sd)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)*sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
M = matrix(1,nrow=n, ncol=p)
SAheartData=SAheart %>% select(-famhist,-chd)
n=nrow(SAheart)
p=ncol(SAheart)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)*sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
X=X/ecarttype
apply(X,MARGIN=2,FUN=sd)
SAheartData=SAheart %>% select(-famhist,-chd)
n=nrow(SAheart)
p=ncol(SAheartData)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)*sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
X=X/ecarttype
apply(X,MARGIN=2,FUN=sd)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)*sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
X=X/ecarttype
apply(X,MARGIN=2,FUN=sd)
X = as.matrix(X) #Transformation de la dataframe X en matrice
hatSigma = (1/n)t(X)%*%X
hatSigma = (1/n)*t(X)%*%X
View(hatSigma)
View(hatSigma)
eig = eigen(hatSigma)
print(eig$values)
SommeVP=mean(eig$values)
SommeVP=eig$values/sum(eig$values)
knitr::opts_chunk$set(echo = TRUE,results="hide",message=F,warning=F)
rm(list=objects())
library(FactoMineR)
library(factoextra)
library(dplyr)
library(knitr)
SAheart=read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/SAheart.data",
sep=",", head=T, row.names=1)
SAheartData=SAheart %>% select(-famhist,-chd)
n=nrow(SAheart)
p=ncol(SAheartData)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)*sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
X=X/ecarttype
apply(X,MARGIN=2,FUN=sd)
X = as.matrix(X) #Transformation de la dataframe X en matrice
hatSigma = (1/n)*t(X)%*%X
eig = eigen(hatSigma)
print(eig$values)
SommeVP=eig$values/sum(eig$values)
plot(eig$values,SommeVP)
plot(SommeVP,eig$values)
print(sum(X**2)/n)
print(sum(eig$values))
res.pa=PCA(X)
VPcontribution=eig$values/sum(eig$values)
plot(eig$valus,VPcontribution)
VPcontribution=eig$values/sum(eig$values)
plot(eig$values,VPcontribution)
VPcontribution=eig$values/sum(eig$values)
plot(1:8,VPcontribution)
which.max(res.pca$ind$contrib[,2])
which.max(res.pca$ind$contrib[,2])
which.max(res.pca$ind$contrib[,2])
which.max(res.pca$ind$contrib[,2])
res.pca=PCA(X)
which.max(res.pca$ind$contrib[,2])
install.packages(c("askpass", "backports", "BH", "bit", "bit64", "bitops", "blob", "brio", "caTools", "cli", "clipr", "colorspace", "config", "crayon", "curl", "DBI", "dbplyr", "diffobj", "digest", "dplyr", "evaluate", "fansi", "forcats", "generics", "glue", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "later", "lattice", "lme4", "magrittr", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "mongolite", "nlme", "nloptr", "nnet", "odbc", "openssl", "packrat", "pkgconfig", "PKI", "prettyunits", "profvis", "progress", "promises", "purrr", "quantreg", "r2d3", "R6", "rappdirs", "Rcpp", "RCurl", "readr", "rJava", "RJDBC", "RJSONIO", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "shiny", "sp", "sparklyr", "stringi", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "utf8", "xfun", "xml2", "yaml"))
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::tlmgr_update()
install.packages("tinytex")
install.packages('tinytex')
install.packages("tinytex")
#echo : affiche le code dans le PDF
#results: affiche les résultats
knitr::opts_chunk$set(echo = TRUE,results="hide",message=F,warning=F)
rm(list=objects())
library(FactoMineR)
library(factoextra)
library(dplyr)
library(knitr)
res.pca=PCA(X,1)
res.pca=PCA(X)
res.pca=PCA(X)
#echo : affiche le code dans le PDF
#results: affiche les résultats
knitr::opts_chunk$set(echo = TRUE,results="hide",message=F,warning=F)
rm(list=objects())
library(FactoMineR)
library(factoextra)
library(dplyr)
library(knitr)
SAheart=read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/SAheart.data",
sep=",", head=T, row.names=1)
SAheartData=SAheart %>% select(-famhist,-chd)
n=nrow(SAheart)
p=ncol(SAheartData)
SAheartData=SAheart %>% select(-famhist,-chd)
n=nrow(SAheart)
p=ncol(SAheartData)
M = matrix(1,nrow=n, ncol=p)
moyennes=colMeans(SAheartData)
moyennes = sweep(M,MARGIN=2,STATS=moyennes,FUN="*") #Margin : précise l'axe sur lequel on fait l'opération
X = SAheartData - moyennes
print(colMeans(X))
##Standardiser
ecarttype = apply(SAheartData,MARGIN=2,FUN=sd)
ecarttype = sqrt((n-1)/n)*sweep(M,MARGIN=2,STATS=ecarttype,FUN="*")
X=X/ecarttype
apply(X,MARGIN=2,FUN=sd)
X = as.matrix(X) #Transformation de la dataframe X en matrice
hatSigma = (1/n)*t(X)%*%X
eig = eigen(hatSigma)
print(eig$values)
print(sum(X**2)/n)
print(sum(eig$values))
rm()
rm(*)
rm(list)
rm(list=ls())
library(readxl)
resultats_par_niveau_cirlg_t1_france_entiere <- read_excel("C:\\Users\\GEIST\\OneDrive - GENES\\Projets\\Politique\\Présidentielles circonscription\\resultats-par-niveau-cirlg-t1-france-entiere")
View(resultats_par_niveau_cirlg_t1_france_entiere)
chemin_xlsx <- "C:\Users\GEIST\OneDrive - GENES\Projets\Politique\Présidentielles circonscription"
library(readxl)
resultats_par_niveau_cirlg_t1_france_entiere <- read_excel("resultats-par-niveau-cirlg-t1-france-entiere.xlsx")
View(resultats_par_niveau_cirlg_t1_france_entiere)
data(resultats-par-niveau-cirlg-t1-france-entiere)
d<-resultats-par-niveau-cirlg-t1-france-entiere
names(d)
names(data)
names(Data)
View(resultats_par_niveau_cirlg_t1_france_entiere)
d<-resultats_par_niveau_cirlg_t1_france_entiere
DataCircons <- resultats_par_niveau_cirlg_t1_france_entiere
Names(DataCircons)
name(DataCircons)
names(DataCircons)
names(DataCircons)
Resume(Nom)
resume(Nom)
summary(Nom)
summary(DataCircon$Nom)
summary(DataCircons$Nom)
summary(DataCircons)
describe(DataCircons)
describe(DataCircons$Nom)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
describe(DataCircons$Nom)
table(DataCircons$Nom)
Hist(DataCircons$Nom)
hist(DataCircons$Nom)
hist(DataCircons$Abstentions)
var(DataCircons)
var(DataCircons$`% Voix/Exp`)
hist(DataCircons$`% Voix/Exp`)
rename(DataCircons,c("`% Voix/Exp`"="Arthaud"))
rename(DataCircons,c(`% Voix/Exp`="Arthaud"))
rename(DataCircons,c(`% Voix/Exp`="Arthaud"))
rename(DataCircons,c(`% Voix/Exp`="Arthaud"))
rename(DataCircons,c("Nom"="Nom1"))
rename(DataCircons,c("Nom"="Nom1","Prénom"="Prénom1"))
Rename(DataCircons,c("Nom"="Nom1","Prénom"="Prénom1"))
rename_with(DataCircons,c("Nom"="Nom1","Prénom"="Prénom1"))
names(DataCircons)
install.packages("dplyr")
rename(DataCircons,c("Nom"="Nom1","Prénom"="Prénom1"))
library(dplyr, quietly = TRUE)
rename(DataCircons,c("Nom"="Nom1","Prénom"="Prénom1"))
rename(DataCircons,c("Nom"="Nombis","Prénom"="Prénom1"))
rename(DataCircons,c("NovoNom"="Nom"))
names(DataCircons)
rename(DataCircons,c("Nom"="Nombis","Prénom"="Prénom1"))
rename(DataCircons,c("Nome"="Nom","Prénom"="Prénom1"))
rename(DataCircons,c("Nome"="Nom"))
names(DataCircons)
DataCircons$Nome
DataCircons$Nom
names(DataCircons)
noms = names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = Nom)
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Nom =Arthaud)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = % Voix/Exp)
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = % Voix/Exp)
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = %Voix/Exp)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = '% Voix/Exp')
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = '% Voix/Exp',Roussel='...33',)
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Roussel='...33')
noms = names(DataCircons)
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Arthaud = '% Voix/Exp',Roussel='...33',Macron='...40',Lassalle='...47',Le_Pen='...54',Zemmour='...61',Melenchon='...68',Hidalgo='...75',Jadot='...82',Pecresse='...89',Poutou='...96',NDA='103')
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Macron='...40',Lassalle='...47',Le_Pen='...54',Zemmour='...61',Melenchon='...68',Hidalgo='...75',Jadot='...82',Pecresse='...89',Poutou='...96',NDA='103')
names(DataCircons)
DataCircons <- DataCircons %>% dplyr::rename(Macron='...40',Lassalle='...47',Le_Pen='...54',Zemmour='...61',Melenchon='...68',Hidalgo='...75',Jadot='...82',Pecresse='...89',Poutou='...96',NDA='...103')
names(DataCircons)
df = data(DataCircons,list = 1)
df = data(DataCircons,list ='1')
df = data(DataCircons,list ="Code du département")
df = data(DataCircons,c=(1))
df = data.frame(DataCircons,row.names = 1)
df = data.frame(DataCircons,row.names = "1")
df = data.frame(DataCircons,variable.names(1))
resultats_par_niveau_cirlg_t1_france_entiere
names(DataCircons)
max(DataCircons$Arthaud)
max(DataCircons[1,])
max(DataCircons[1,"Arthaud":"Roussel"])
max(DataCircons[1,"Arthaud"])
max(DataCircons[1,"Arthaud"+"Lassalle"])
max(DataCircons[1,"Arthaud","Lassalle"])
max(DataCircons[1,"Arthaud,"Lassalle"])
max(DataCircons[1,"Arthaud"Lassalle"])
max(DataCircons[1,"Arthaud""Lassalle"])
max(DataCircons[1,c("Arthaud","Lassalle")])
max(DataCircons[1,c("Arthaud","Lassalle","Macron")])
argmax(DataCircons[1,c("Arthaud","Lassalle","Macron")])
max(DataCircons[1,c("Arthaud","Lassalle","Macron")])
max(DataCircons[,c("Arthaud","Lassalle","Macron")])
max(DataCircons[1,c("Arthaud","Lassalle","Macron")])
DataCircons$Arthaud
rm()
rm(all)
rm(all)
rm(all)
rm(all)
tab = x*a
a = 3
x = rnorm(10)
tab = x*a
rm(list=ls())
install.packages("tidyverse")
setwd("C:\\Users\\louis\\Garch_Model_Assets")
library (tidyverse)
library(dplyr)
library(ggplot2)
library(lubridate)
DAX$Date = as.Date(DAX$Date)
DAX$Open = as.numeric(DAX$Open)
DAX = read.csv("^GDAXI.csv",sep=",")
DAX$Date = as.Date(DAX$Date)
DAX$Open = as.numeric(DAX$Open)
DAX = select(DAX,-"Close",-"High",-"Low",-"Close",-"Adj.Close",-"Volume")
DAX = mutate(DAX, rendement = log(DAX$Open/lag(DAX$Open))) #rendement
DAX = mutate(DAX, rend_car = rendement**2) #rendement au carré
prix = ggplot(data = DAX) + geom_line(aes(x = Date,y = Open))
plot_rdt = ggplot(data = DAX) + geom_line(aes(x = Date,y = rendement))
plot(prix)
plot(plot_rdt)
acf(na.omit(DAX$rendement))
acf(na.omit((DAX$rend_car)))
acf(na.omit((DAX$rend_car)))
n = 10**5
x = rnorm(n)
x <- x**2
res <- c()
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
mu = mean(log(alpha*x + beta))
if (mu>=0){
res <- c(res,mu)
break
}
}
}
plot(res,type="l")
res
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res,esp)
}
break
}
}
plot(res,type="l")
x = rnorm(n)
x <- x**2
res <- c()
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res,esp)
}
break
}
}
plot(res,type="l")
x = rnorm(n)
x <- x**2
res <- c()
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res,esp)
break
}
}
}
plot(res,type="l")
res <- c(res)
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res)
break
}
}
}
plot(res,type="l")
plot(res,type="l")
tableau =c(1:3)
plot(tableau,type="l")
plot(tableau)
length(x)
### Simulation
n = 10**4
x = rnorm(n)
x <- x**2
res <- c()
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res)
break
}
}
}
plot(res,type="l")
### Simulation
n = 10**5
x = rnorm(n)
x <- x**2
res <- c()
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res)
break
}
}
}
plot(res,type="l")
for(a in c(1:200)){
alpha = (a-1)/100
for(b in c(1:200)){
beta = (b-1)/100
esp = mean(log(alpha*x + beta))
if (esp>=0){
res <- c(res,beta)
break
}
}
}
plot(res,type="l")
